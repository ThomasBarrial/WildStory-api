// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  password      String
  role          Role           @default(USER)
  profilTitle   String
  city          String?
  birthDate     String
  avatarUrl     String?        @map(name: "avatar_url")
  landimageUrl  String?        @map(name: "landimage_url")
  formation     Formation?     @relation(fields: [idFormation], references: [id])
  idFormation   String?
  posts         Post[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  userSkills    UserSkill[]
  likes         Likes[]
  comments      Comment[]
  followers     Follows[]      @relation("follower")
  following     Follows[]      @relation("following")
  mediaLink     MediaLink[]
  conversations Conversation[]
  postRegitser  PostRegister[]
  Message       Message[]      @relation("message")
}

model Formation {
  id            String   @id @default(uuid())
  formationName String   @unique
  users         User[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@map(name: "formations")
}

model MediaLink {
  id     String     @id @default(uuid())
  link   String
  icon   MediaIcon? @relation(fields: [iconId], references: [id])
  iconId String?
  user   User       @relation(fields: [userId], references: [id])
  userId String
}

model MediaIcon {
  id        String      @id @default(uuid())
  name      String
  iconUrl   String
  mediaLink MediaLink[]
}

model Post {
  id           String         @id @default(uuid())
  text         String
  imageUrl     String[]       @map(name: "image_url")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  likes        Likes[]
  comments     Comment[]
  topics       Topics         @relation(fields: [topicsId], references: [id])
  topicsId     String
  postRegister PostRegister[]

  @@map(name: "posts")
}

model Skills {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  userSkills UserSkill[]

  @@map(name: "skills")
}

model UserSkill {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skill     Skills   @relation(fields: [skillId], references: [id])
  skillId   String
  note      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "users_skills")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "comments")
}

model Likes {
  id     String  @id @default(uuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String
  post   Post    @relation(fields: [postId], references: [id])
  postId String
  isLike Boolean @default(true)
}

model Topics {
  id         String @id @default(uuid())
  topicsName String @unique
  posts      Post[]
}

model PostRegister {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Follows {
  id          String @id @default(uuid())
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String
}

model Conversation {
  id           String    @id @default(uuid())
  members      User[]
  message      Message[] @relation("conversation")
  createdAt    DateTime  @default(now())
  user1Id      String
  user2Id      String
  isNewMessage String   @default("")
}

model Message {
  id             String       @id @default(uuid())
  conversation   Conversation @relation("conversation", fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation("message", fields: [senderId], references: [id])
  senderId       String
  text           String
  createdAt      DateTime     @default(now())
}

enum Role {
  ADMIN
  USER

}
