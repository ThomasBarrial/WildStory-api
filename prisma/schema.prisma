// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String      @id @default(uuid())
  username     String      @unique
  email        String      @unique
  password     String
  profilTitle  String
  city         String?
  birthDate    String?
  avatarUrl    String?     @map(name: "avatar_url")
  landimageUrl String?     @map(name: "landimage_url")
  formation    Formation?  @relation(fields: [idFormation], references: [id])
  idFormation  String?
  posts        Post[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  userSkills   UserSkill[]
  comments     Comment[]
  mediaLink    MediaLink[]

  @@map(name: "users")
}

model Formation {
  id            String   @id @default(uuid())
  formationName String   @unique
  users         User[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@map(name: "formations")
}

model MediaLink {
  id          String   @id @default(uuid())
  name        String
  link        String
  icon        MediaIcon? @relation(fields: [idIcon], references: [id])
  idIcon     String?
  users         User[]
}

model MediaIcon {
  id          String   @id @default(uuid())
  name        String
  iconUrl     String
  mediaLink   MediaLink[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  text      String
  likes     Int?
  imageUrl  String[]    @map(name: "image_url")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]

  @@map(name: "posts")
}

model Skills {
  id         String      @id @default(uuid())
  name       String      
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  userSkills UserSkill[]

  @@map(name: "skills")
}

model UserSkill {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skill     Skills   @relation(fields: [skillId], references: [id])
  skillId   String
  note      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "users_skills")
}

model Comment {
  id     String @id @default(uuid())
  text   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map(name: "comments")
}

